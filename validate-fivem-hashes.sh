#!/bin/bash
# Script de validation des hash de messages FiveM
# V√©rifie que les hash constants dans le code XDP sont √† jour

set -e

# Couleurs pour les logs
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

log_success() {
    echo -e "${GREEN}‚úÖ${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è${NC} $1"
}

log_error() {
    echo -e "${RED}‚ùå${NC} $1"
}

echo "üîç Validation des Hash de Messages FiveM"
echo "========================================"

# Extraire les hash du code XDP
echo "Extraction des hash constants du code XDP..."

hash_count=$(grep -c "MSG_.*_HASH" fivem_xdp.c || echo "0")

if [ "$hash_count" -eq 0 ]; then
    log_error "Aucun hash de message trouv√© dans fivem_xdp.c"
    exit 1
fi

log_success "Trouv√© $hash_count hash constants dans le code XDP"

# V√©rifier la fonction de validation des hash
echo ""
echo "V√©rification de la fonction de validation..."

if grep -q "is_valid_fivem_message_hash" fivem_xdp.c; then
    log_success "Fonction de validation des hash pr√©sente"
else
    log_error "Fonction de validation des hash manquante"
    exit 1
fi

# V√©rifier que tous les hash sont utilis√©s dans la validation
echo ""
echo "V√©rification de l'utilisation des hash..."

# Extraire tous les hash d√©finis
hash_defines=$(grep "MSG_.*_HASH" fivem_xdp.c | grep "#define" | awk '{print $2}' | sort)
hash_usage=$(grep -A 50 "is_valid_fivem_message_hash" fivem_xdp.c | grep "MSG_.*_HASH" | sed 's/.*\(MSG_[A-Z_]*_HASH\).*/\1/' | sort | uniq)

echo "Hash d√©finis:"
echo "$hash_defines"
echo ""
echo "Hash utilis√©s dans la validation:"
echo "$hash_usage"

# Comparer les listes
unused_hashes=$(comm -23 <(echo "$hash_defines") <(echo "$hash_usage"))
if [ -n "$unused_hashes" ]; then
    log_warning "Hash d√©finis mais non utilis√©s:"
    echo "$unused_hashes"
else
    log_success "Tous les hash d√©finis sont utilis√©s"
fi

# V√©rifier la structure de validation optimis√©e
echo ""
echo "V√©rification de l'optimisation de la validation..."

if grep -q "switch.*first_byte" fivem_xdp.c; then
    log_success "Validation optimis√©e par premier byte pr√©sente"
else
    log_warning "Validation non optimis√©e - consid√©rez l'optimisation par premier byte"
fi

# V√©rifier les commentaires de documentation
echo ""
echo "V√©rification de la documentation des hash..."

documented_hashes=$(grep -B1 -A1 "MSG_.*_HASH" fivem_xdp.c | grep -c "//" || echo "0")
total_hashes=$(grep -c "MSG_.*_HASH.*0x" fivem_xdp.c || echo "0")

if [ "$documented_hashes" -gt 0 ]; then
    log_success "Hash document√©s: $documented_hashes/$total_hashes"
else
    log_warning "Aucune documentation trouv√©e pour les hash"
fi

# V√©rifier la coh√©rence des valeurs hexad√©cimales
echo ""
echo "V√©rification de la coh√©rence des valeurs..."

invalid_hashes=$(grep "MSG_.*_HASH" fivem_xdp.c | grep -v "0x[0-9A-Fa-f]\{8\}" | wc -l)
if [ "$invalid_hashes" -eq 0 ]; then
    log_success "Tous les hash ont un format hexad√©cimal valide"
else
    log_error "$invalid_hashes hash(es) ont un format invalide"
fi

# V√©rifier les doublons
echo ""
echo "V√©rification des doublons..."

hash_values=$(grep "MSG_.*_HASH.*0x" fivem_xdp.c | awk '{print $3}' | sort)
unique_values=$(echo "$hash_values" | uniq)

if [ "$(echo "$hash_values" | wc -l)" -eq "$(echo "$unique_values" | wc -l)" ]; then
    log_success "Aucun hash dupliqu√© trouv√©"
else
    log_error "Hash dupliqu√©s d√©tect√©s"
    echo "Valeurs dupliqu√©es:"
    echo "$hash_values" | uniq -d
fi

# Recommandations
echo ""
echo "üìã Recommandations:"
echo "==================="

echo "1. V√©rifiez r√©guli√®rement les mises √† jour FiveM pour de nouveaux types de messages"
echo "2. Testez la validation avec du trafic FiveM r√©el"
echo "3. Surveillez les m√©triques de paquets rejet√©s pour d√©tecter de nouveaux types"
echo "4. Documentez la source de chaque hash pour faciliter la maintenance"

# R√©sum√© final
echo ""
echo "üìä R√©sum√© de la validation:"
echo "=========================="
echo "Hash constants trouv√©s: $hash_count"
echo "Hash utilis√©s: $(echo "$hash_usage" | wc -l)"
echo "Hash non utilis√©s: $(echo "$unused_hashes" | wc -l)"
echo "Format invalide: $invalid_hashes"

if [ "$invalid_hashes" -eq 0 ] && [ -z "$unused_hashes" ]; then
    log_success "Validation des hash FiveM r√©ussie ‚úÖ"
    exit 0
else
    log_warning "Validation des hash FiveM avec avertissements ‚ö†Ô∏è"
    exit 0
fi
